Index: src/MyArrayList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport java.util.Arrays;\r\n\r\n\r\n\r\npublic class MyArrayList<E> implements MyList<E> {      // Создаём публичный класс MyArrayList<E>, который реализует интерфейс MyList<E>\r\n\r\n    private static final int DEFAULT_CAPACITY = 10;     // Создаём начальный размер массива. Объявляем приватную статическую конечную переменную целочисленного типа DEFAULT_CAPACITY с константным значением 10\r\n    private E[] arrayValue;                             // Объявляем приватный внутренний массив класса Object (E)\r\n    private int arrayValueIndex = 0;                    // Создаём переменную, которая в себе хранит индекс arrayValue[]. Объявляем приватную переменную целочисленного типа arrayValueIndex и значением 0\r\n    private int capacity = 0;                           // Создаём переменную, которая хранит в себе длину массива. Объявляем приватную переменную целочисленного типа capacity и значением 0\r\n\r\n    public MyArrayList() {                              // Создаём конструктор,  в котором инициализируем переменную DEFAULT_CAPACITY\r\n        this.capacity = DEFAULT_CAPACITY;\r\n        arrayValue = (E[]) new Object[capacity];        // Создаём новый массив, который относится к классу Object\r\n    }\r\n\r\n    public MyArrayList(int capacity) {                  // Создаём конструктор,  в котором инициализируем переменную capacity, в параметры которого передаём значение capacity\r\n        this.capacity = capacity;\r\n        arrayValue = (E[]) new Object[capacity];        // Создаём новый массив, который относится к классу Object\r\n    }\r\n\r\n\r\n    @Override\r\n    public String toString() {                          // Переопределяем метод toString\r\n        String result = \"[\" + arrayValue[0];\r\n\r\n        for (int i = 1; i < arrayValueIndex; i++) {\r\n            result += \", \" + arrayValue[i];\r\n        }\r\n        result += \"]\";\r\n        return result;\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean add(E value) {                           // Переопределяем метод add, который реализует метод MyList.\r\n        if (value == null) {                                // Проверяем переменную value на содержание\r\n            throw new NullPointerException();               // Если в ней ничего, то выбрасываем ошибку NullPointerException()\r\n        } else {                                            // иначе\r\n\r\n            if (arrayValueIndex < capacity) {               // Если значение индекса arrayValueIndex меньше длины массива\r\n                arrayValue[arrayValueIndex] = value;        // то в значение переменной arrayValue с индексом arrayValueIndex записываем значение value\r\n                arrayValueIndex++;                          // индексы массива записываем в счётчик\r\n                return true;                                // При успешном добавлении возвращаем true\r\n            } else {                                        // иначе\r\n                increaseCapacity();                         // Вызываем метод по увеличению длины массива\r\n                arrayValue[arrayValueIndex] = value;        // и в значение переменной arrayValue с индексом arrayValueIndex записываем значение value\r\n                return true;                                // При успешном добавлении возвращаем true\r\n            }\r\n        }\r\n    }\r\n    private void increaseCapacity() {                       // Создаём метод по увеличению массива\r\n        capacity *= 3;                                      // Увеличиваем длину массива в 3 раза\r\n        arrayValue = Arrays.copyOf(arrayValue, capacity);   // В переменную arrayValue копируем новый arrayValue и объём массива\r\n    }\r\n\r\n    @Override\r\n    public boolean remove(int index) {                      // Переопределяем метод remove, который реализует метод MyList.\r\n        if (index < 0 || index >= arrayValueIndex) {        // Если индекс меньше 0 и больше либо равен переменной arrayValueIndex\r\n            throw new IndexOutOfBoundsException();          // то выбрасываем ошибку IndexOutOfBoundsException()\r\n        }\r\n        for (int i = index + 1; i < arrayValueIndex; i++) {\r\n            arrayValue[i - 1] = arrayValue[i];\r\n        }\r\n        arrayValueIndex--;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int size() {                                     // Переопределяем метод add, который реализует метод MyList.\r\n        return this.arrayValueIndex;\r\n    }\r\n\r\n    @Override\r\n    public boolean remove(E value) {                        // Переопределяем метод remove\r\n        if(value==null){                                    //\r\n            throw new NullPointerException();\r\n        }\r\n        int index = -1;\r\n        for (int i = 0; i < arrayValueIndex; i++) {\r\n            if (value.equals(arrayValue[i])) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index != -1) {\r\n            remove(index);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public E get(int index) {                               // Переопределяем метод E get, который реализует метод MyList.\r\n        if (index < 0 || index >= arrayValueIndex) {\r\n            throw new IndexOutOfBoundsException();\r\n        }\r\n        return arrayValue[index];\r\n    }\r\n\r\n    @Override\r\n    public int indexOf(E value) {                           // Переопределяем метод indexOf, который реализует метод MyList.\r\n        if (value != null) {\r\n            for (int i = 0; i < arrayValueIndex; i++) {\r\n                if (arrayValue[i].equals(value)) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public boolean add(int index, E value) {                // Переопределяем метод add, который реализует метод MyList.\r\n        if (index < 0 || index > arrayValueIndex) {\r\n            throw new IndexOutOfBoundsException();\r\n        }\r\n        if(value==null){\r\n            throw new NullPointerException();\r\n        }\r\n        if (arrayValueIndex >= capacity) {\r\n            increaseCapacity();\r\n        }\r\n        for (int i = arrayValueIndex; i > index; i--) {\r\n            arrayValue[i] = arrayValue[i - 1];\r\n        }\r\n        arrayValue[index] = value;\r\n        arrayValueIndex++;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public E set(int index, E value) {                      // Переопределяем метод E set, который реализует метод MyList.\r\n        if (index < 0 || index >= arrayValueIndex) {\r\n            throw new IndexOutOfBoundsException();\r\n        }\r\n        if(value==null){\r\n            throw new NullPointerException();\r\n        }\r\n        E oldValue = arrayValue[index];\r\n        arrayValue[index] = value;\r\n        return oldValue;\r\n    }\r\n\r\n    @Override\r\n    public boolean contains(E value) {                      // Переопределяем метод containes, который реализует метод MyList.\r\n        if (value != null) {\r\n            for (int i = 0; i < arrayValueIndex; i++) {\r\n                if (arrayValue[i].equals(value)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty() {                              // Переопределяем метод isEmpty, который реализует метод MyList.\r\n        return arrayValueIndex == 0;\r\n    }\r\n\r\n    @Override\r\n    public void clear() {                                   // Переопределяем метод clear, который реализует метод MyList.\r\n        arrayValueIndex = 0;\r\n        arrayValue=(E[]) new Object[capacity];\r\n    }\r\n\r\n    @Override\r\n    public void sort() {                                    // Переопределяем метод sort, который реализует метод MyList.\r\n        BubbleSort bubbleSort = new BubbleSort();\r\n//        bubbleSort.bubbleSortMethod();\r\n    }\r\n    public void sortPerson() {\r\n        Person[] personMyList= new Person[this.arrayValueIndex];\r\n        for (int i=0;i<this.arrayValueIndex;i++){\r\n            personMyList[i]=(Person) this.arrayValue[i];\r\n        }\r\n\r\n        for (int i = 1; i < personMyList.length; i++) {\r\n            for (int k = 0; k < personMyList.length-1; k++) {\r\n                if (personMyList[i].getName().compareToIgnoreCase(personMyList[k].getName()) < 0) {\r\n                    Person temp = personMyList[i];\r\n                    personMyList[i]=( personMyList[k]);\r\n                    personMyList[k]= temp;\r\n                }\r\n            }\r\n        }\r\n        for (int i=0;i<this.arrayValueIndex;i++){\r\n            arrayValue[i]= (E) personMyList[i];\r\n        }\r\n    }\r\n\r\n    public static class BubbleSort {\r\n        public void bubbleSortMethod(MyArrayList<Integer> myArrayList) {\r\n            for( int i = 1; i < myArrayList.size(); i++) {\r\n                for( int j = 0; j < myArrayList.size() -1; j++) {\r\n                    if( myArrayList.get(j) > myArrayList.get(j+1)) {\r\n                        int temp = (int) myArrayList.get(j);\r\n                        myArrayList.set(j, myArrayList.get(j+1));\r\n                        myArrayList.set(j+1, temp);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/MyArrayList.java b/src/MyArrayList.java
--- a/src/MyArrayList.java	(revision 613e02df27a1c1bfe8e65ae5929d5a7cfd573629)
+++ b/src/MyArrayList.java	(date 1641143244074)
@@ -35,14 +35,14 @@
     }
 
     @Override
-    public boolean add(E value) {                           // Переопределяем метод add, который реализует метод MyList.
+    public boolean add(E value) {                           // Переопределяем метод add. Метод принимает объект класса Е(Object)
         if (value == null) {                                // Проверяем переменную value на содержание
             throw new NullPointerException();               // Если в ней ничего, то выбрасываем ошибку NullPointerException()
         } else {                                            // иначе
 
             if (arrayValueIndex < capacity) {               // Если значение индекса arrayValueIndex меньше длины массива
                 arrayValue[arrayValueIndex] = value;        // то в значение переменной arrayValue с индексом arrayValueIndex записываем значение value
-                arrayValueIndex++;                          // индексы массива записываем в счётчик
+                arrayValueIndex++;                          // добавляем индекс записываем в счётчик
                 return true;                                // При успешном добавлении возвращаем true
             } else {                                        // иначе
                 increaseCapacity();                         // Вызываем метод по увеличению длины массива
@@ -57,119 +57,119 @@
     }
 
     @Override
-    public boolean remove(int index) {                      // Переопределяем метод remove, который реализует метод MyList.
+    public boolean remove(int index) {                      // Переопределяем метод remove. Метод принимает индекс
         if (index < 0 || index >= arrayValueIndex) {        // Если индекс меньше 0 и больше либо равен переменной arrayValueIndex
             throw new IndexOutOfBoundsException();          // то выбрасываем ошибку IndexOutOfBoundsException()
         }
-        for (int i = index + 1; i < arrayValueIndex; i++) {
-            arrayValue[i - 1] = arrayValue[i];
+        for (int i = index + 1; i < arrayValueIndex; i++) { // перебираем индексы
+            arrayValue[i - 1] = arrayValue[i];              // присваиваем новое значание переменной arrayValue
         }
-        arrayValueIndex--;
-        return true;
+        arrayValueIndex--;                                  // удаляем индекс из счётчика
+        return true;                                        // При успешном удалении возвращаем true
     }
 
     @Override
-    public int size() {                                     // Переопределяем метод add, который реализует метод MyList.
-        return this.arrayValueIndex;
+    public int size() {                                     // Переопределяем метод add
+        return this.arrayValueIndex;                        // Возвращаем размер переменной arrayValueIndex
     }
 
     @Override
-    public boolean remove(E value) {                        // Переопределяем метод remove
-        if(value==null){                                    //
-            throw new NullPointerException();
-        }
-        int index = -1;
-        for (int i = 0; i < arrayValueIndex; i++) {
-            if (value.equals(arrayValue[i])) {
-                index = i;
+    public boolean remove(E value) {                        // Переопределяем метод remove. Метод принимает объект класса Е(Object)
+        if(value==null){                                    // Проверяем переменную value на содержание
+            throw new NullPointerException();               // Если в ней ничего, то выбрасываем ошибку NullPointerException()
+        }                                                   // иначе
+        int index = -1;                                     // присваиваем индексу -1
+        for (int i = 0; i < arrayValueIndex; i++) {         // перебираем индексы
+            if (value.equals(arrayValue[i])) {              // если значение объект класса Е(Object) совпадает с arrayValue[i]
+                index = i;                                  // то присваиваем индексу -- i
                 break;
             }
         }
-        if (index != -1) {
-            remove(index);
-            return true;
+        if (index != -1) {                                  // если индекс не равен -1
+            remove(index);                                  // то удаляем индекс
+            return true;                                    // При успешном удалении возвращаем true
         }
-        return false;
+        return false;                                       // иначе возвращаем false
     }
 
     @Override
-    public E get(int index) {                               // Переопределяем метод E get, который реализует метод MyList.
-        if (index < 0 || index >= arrayValueIndex) {
-            throw new IndexOutOfBoundsException();
+    public E get(int index) {                               // Переопределяем метод E get. Метод принимает index
+        if (index < 0 || index >= arrayValueIndex) {        // Если индекс меньше 0 или индекс больше значения переменной arrayValueIndex
+            throw new IndexOutOfBoundsException();          // то выбрасываем ошибку IndexOutOfBoundsException()
         }
-        return arrayValue[index];
+        return arrayValue[index];                           // Возвращаем значение переменной arrayValue по индексу
     }
 
     @Override
-    public int indexOf(E value) {                           // Переопределяем метод indexOf, который реализует метод MyList.
-        if (value != null) {
-            for (int i = 0; i < arrayValueIndex; i++) {
-                if (arrayValue[i].equals(value)) {
-                    return i;
+    public int indexOf(E value) {                           // Переопределяем метод indexOf. Метод принимает объект класса Е(Object)
+        if (value != null) {                                // Если значение value не равно ничего
+            for (int i = 0; i < arrayValueIndex; i++) {     // то перебираем значения индексов от 0 до значения переменной arrayValueIndex
+                if (arrayValue[i].equals(value)) {          // Если значение переменной i-того arrayValue совпадает со значением value
+                    return i;                               // то возвращаем i-тый индекс
                 }
             }
-            return -1;
+            return -1;                                      // иначе возвращаем -1
         }
-        return -1;
+        return -1;                                          // иначе возвращаем -1
     }
 
     @Override
-    public boolean add(int index, E value) {                // Переопределяем метод add, который реализует метод MyList.
-        if (index < 0 || index > arrayValueIndex) {
-            throw new IndexOutOfBoundsException();
+    public boolean add(int index, E value) {                // Переопределяем метод add. Метод принимает index и объект класса Е(Object)
+        if (index < 0 || index > arrayValueIndex) {         // Если индекс меньше 0 или больше значения переменной индекса arrayValueIndex
+            throw new IndexOutOfBoundsException();          // то выбрасываем ошибку IndexOutOfBoundsException()
         }
-        if(value==null){
-            throw new NullPointerException();
+        if(value==null){                                    // Если в значении переменной  value ничего, то
+            throw new NullPointerException();               // выбрасываем ошибку NullPointerException()
         }
-        if (arrayValueIndex >= capacity) {
-            increaseCapacity();
+        if (arrayValueIndex >= capacity) {                  // Если значение переменной индекса arrayValueIndex больше либо равно длине массива capacity
+            increaseCapacity();                             // то запускаем метод увеличения длины массива increaseCapacity()
         }
-        for (int i = arrayValueIndex; i > index; i--) {
-            arrayValue[i] = arrayValue[i - 1];
+        for (int i = arrayValueIndex; i > index; i--) {     // Перебираем значения переменной индексов arrayValueIndex
+            arrayValue[i] = arrayValue[i - 1];              // Для переменной значения arrayValue присваиваем новое значение
         }
-        arrayValue[index] = value;
-        arrayValueIndex++;
-        return true;
+        arrayValue[index] = value;                          // В переменную arrayValue по индексу [index] записываем значение value
+        arrayValueIndex++;                                  // В переменную индекса arrayValueIndex добавляем значение индекса
+        return true;                                        // При успешном добавлении возвращаем true
     }
 
     @Override
-    public E set(int index, E value) {                      // Переопределяем метод E set, который реализует метод MyList.
-        if (index < 0 || index >= arrayValueIndex) {
-            throw new IndexOutOfBoundsException();
+    public E set(int index, E value) {                      // Переопределяем метод E set. Метод принимает index и объект класса Е(Object)
+        if (index < 0 || index >= arrayValueIndex) {        // Если индекс меньше 0 или больше значения переменной arrayValueIndex
+            throw new IndexOutOfBoundsException();          // то выбрасываем ошибку IndexOutOfBoundsException()
         }
-        if(value==null){
-            throw new NullPointerException();
+        if(value==null){                                    // Если значение value равно ничего
+            throw new NullPointerException();               // то выбрасываем ошибку NullPointerException()
         }
-        E oldValue = arrayValue[index];
-        arrayValue[index] = value;
-        return oldValue;
+        E oldValue = arrayValue[index];                     // Иначе старому значению объекта E oldValue присваиваем значение arrayValue по индексу
+        arrayValue[index] = value;                          // Значению arrayValue по индексу присваиваем новое значение value
+        return oldValue;                                    // Возвращаем значение oldValue
     }
 
     @Override
-    public boolean contains(E value) {                      // Переопределяем метод containes, который реализует метод MyList.
-        if (value != null) {
-            for (int i = 0; i < arrayValueIndex; i++) {
-                if (arrayValue[i].equals(value)) {
-                    return true;
+    public boolean contains(E value) {                      // Переопределяем метод containes. Метод принимает объект класса Е(Object)
+        if (value != null) {                                // Если в значении переменной  value ничего, то
+            for (int i = 0; i < arrayValueIndex; i++) {     // перебираем индексы от 0 до значения arrayValueIndex
+                if (arrayValue[i].equals(value)) {          // Если значение переменной arrayValue совпадает со значением value
+                    return true;                            // то возвращаем true
                 }
             }
         }
-        return false;
+        return false;                                       // иначе возвращаем false
     }
 
     @Override
-    public boolean isEmpty() {                              // Переопределяем метод isEmpty, который реализует метод MyList.
-        return arrayValueIndex == 0;
+    public boolean isEmpty() {                              // Переопределяем метод isEmpty
+        return arrayValueIndex == 0;                        // Возвращаем сравнение индекса arrayValueIndex с 0
     }
 
     @Override
-    public void clear() {                                   // Переопределяем метод clear, который реализует метод MyList.
-        arrayValueIndex = 0;
-        arrayValue=(E[]) new Object[capacity];
+    public void clear() {                                   // Переопределяем метод clear
+        arrayValueIndex = 0;                                // Значению переменной индексов arrayValueIndex присваиваем 0
+        arrayValue=(E[]) new Object[capacity];              // Значению перменной arrayValue создаём новый обект массива Е длинной capacity
     }
 
     @Override
-    public void sort() {                                    // Переопределяем метод sort, который реализует метод MyList.
+    public void sort() {                                    // Переопределяем метод sort
         BubbleSort bubbleSort = new BubbleSort();
 //        bubbleSort.bubbleSortMethod();
     }
